[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Identifying NYC’s ‘Super Speeders’ Using Open Data",
    "section": "",
    "text": "BetaNYC received a RADAR Request from a NYC resident concerned with the phenomenon of “super speeders”, a term used to refer to those drivers who receive the greatest numbers of speeding violations. This issue is the topic of Senate Bill 24045A, colloquially known as the “Stop Super Speeders Bill” and supported by Families for Safe Streets and Transportation Alternatives.\nIn New York City, only a portion of speeding violations are made available as open data. While the NYPD does report on speeding violations issued, the data are only availble aggregated to precinct and month. In order to look closely at super speeders, the general public is limited to the Open Parking and Camera Violations dataset on NYC Open Data. Working with this dataset to research speeding violations presents challenges:\n\nOnly a portion of overall speeding violations are represented in this dataset. Of the 106 violation types in the Open Parking and Camera Violations dataset, the only type that relates to speeding is PHTO SCHOOL ZN SPEED VIOLATION. These are speed camera violations located within school zones.\nThe dataset is large: It extends back to May 2016 and as of July 8, 2025 contains 132,088,954 rows.\n\nDealing with the sheer size of the dataset led to the submission of the RADAR request:\n\nI am seeking help in analyzing the NYC Open Data Open-Parking-and-Camera-Violations data set to find more information about “super speeders,” as the data set is bigger than I’m able to process with Sheets or Excel and I don’t know how to access the large dataset or use more sophisticated tools.\n\nThe size of the dataset even breaks the functionality of NYC Open Data’s built-in querying tools which causes simple filtering queries to hang indefinitely.\nRather than working in traditonal Excel or CSV files, one way to handle large volumes of data is to use Apache Parquet, a column-oriented format that sacrifices human readability for drastically reduced file sizes and retrieval times. By pairing Parquet files with Apache Arrow, it’s possible to work with the Open Parking and Violation dataset on a personal computer and answer the questions asked in the RADAR request. Arrow libraries exist for many languages. In R, the arrow package provides a backend that can be used with dplyr syntax:\n\nlibrary(tidyverse)\nlibrary(arrow)\nlibrary(lubridate)\nlibrary(flextable)\n\nFirst, download the dataset locally. Then, convert to Parquet. Inconsistent coding of the violation date and time prevent easily partioning the data by year. The file size is reduced from 35.16 GB to 5.95 GB.\n\n# Create directory\ndir.create(\"data\", showWarnings = FALSE)\n\n# Download dataset\ncurl::multi_download(\n  \"https://data.cityofnewyork.us/api/views/nc67-uf89/rows.csv?accessType=DOWNLOAD\",\n  \"data/open-violations.csv\",\n  resume = TRUE\n)\n\n# arrow::open_dataset(...) creates a pointer to the file, doesn't load to memory\nviolations_csv &lt;- open_dataset(\"data/open-violations.csv\",\n                               format = \"csv\")\n# Convert to parquet\nviolations_csv |&gt;\n  write_dataset(path = \"data/parquet\",\n                format = \"parquet\")\n\narrow::open_dataset() is used to create a pointer to the dataset without loading it into memory:\n\n# Create pointer to parquet\nviolations_pq &lt;- open_dataset(\"data/parquet\")\n\nWe’re now ready to answer the questions posed in the RADAR request:\n\nWhat is the total amount owed in unpaid fines by cars with n (1, 2, 3…) speeding tickets in 2024?\n\n\nowed_2024 &lt;- violations_pq |&gt; \n  filter(str_detect(`Issue Date`, \"2024\") & str_detect(Violation, \"SPEED\") & `Amount Due` &gt; 0) |&gt;\n  group_by(State, Plate) |&gt; \n  summarize(n_tickets = n(), owed_ind = sum(`Amount Due`, na.rm = T)) |&gt; \n  group_by(n_tickets) |&gt; \n  summarize(n_vehicles = n(), total_owed = sum(owed_ind)) |&gt; \n  arrange(desc(n_tickets)) |&gt; \n  collect()\n\nowed_2024_ft &lt;- owed_2024 |&gt; \n  flextable() |&gt; \n  colformat_double(prefix =\"$\", digits = 2)\n\ntotal_owed_2024 &lt;- sum(owed_2024$n_vehicles)\n\n\n\n\nn_ticketsn_vehiclestotal_owed5311$40,079.724311$34,850.873271$25,833.262841$20,332.302461$19,707.062341$19,037.982311$18,263.712131$16,765.012051$16,402.291911$15,356.131831$13,265.001821$13,859.291762$27,967.491681$13,087.251631$12,793.661601$13,129.991581$12,457.181481$11,349.501471$11,797.101441$11,749.431391$11,180.091372$20,230.001352$21,258.641342$21,457.541311$10,512.871302$19,690.251291$9,743.011282$20,401.941261$10,063.831251$9,919.241232$19,649.471221$9,889.511201$9,532.751193$28,481.161171$9,319.051161$9,429.651153$27,349.981132$17,807.931122$17,990.921081$8,679.701064$33,970.971053$23,548.761043$24,888.261032$16,419.721024$32,728.081014$32,471.611004$31,854.16982$15,369.41972$14,298.10962$15,214.46945$37,433.34931$5,906.63922$14,664.80912$13,738.46903$21,644.49896$41,077.33883$21,226.55877$45,523.40862$13,644.89854$27,208.45842$13,388.15836$39,488.828210$62,146.16816$38,115.94801$6,418.42795$29,844.40783$18,551.39779$53,812.60766$36,319.19755$29,735.27743$17,731.90734$23,358.16723$16,294.98714$22,656.59704$21,629.71696$31,560.646810$54,229.62675$25,908.69664$19,512.40658$40,939.076411$56,596.346315$73,699.83628$37,285.43616$26,921.936013$60,558.335911$51,006.525811$50,542.095719$85,209.265621$89,374.685517$69,846.855411$41,013.025317$68,278.265215$60,715.865127$105,694.025018$70,123.904928$105,852.564823$86,557.094723$85,050.084629$101,336.774543$148,233.044430$102,097.564335$115,873.414233$105,407.234144$139,904.954044$133,477.703948$143,870.383844$131,427.773752$145,395.313670$193,774.223552$139,436.053472$188,426.893370$177,404.973293$227,452.213185$198,931.6130106$242,633.4129117$254,423.0428111$234,622.9027135$280,962.8426142$285,057.0925161$305,949.4724190$350,266.9223220$384,062.6722237$389,414.5221316$500,926.4720305$463,225.8719371$535,920.6118438$595,369.5917536$690,017.9516577$700,289.9915680$772,419.5614840$886,358.88131,003$987,320.49121,202$1,083,663.38111,500$1,235,921.97101,887$1,424,066.6292,346$1,596,368.4983,139$1,888,933.0074,206$2,219,781.3165,931$2,679,845.2958,668$3,266,666.29413,883$4,218,185.59325,164$5,763,192.47254,091$8,318,879.291168,315$13,025,263.77\n\n\n\n In 2024, there is a single vehicle which owes $40,079.72 on 531 school zone speed violations! Overall, 298,177 vehicles owe $60,961,931.58 in unpaid school zone speeding violations received in 2024.\n\nHow many cars with n (1, 2, 3…) speeding tickets in 2024 owe $350 or more?\n\n\nowed_2024_gt350 &lt;- violations_pq |&gt; \n  filter(str_detect(`Issue Date`, \"2024\") & str_detect(Violation, \"SPEED\") & `Amount Due` &gt; 0) |&gt;\n  group_by(State, Plate) |&gt; \n  summarize(n_tickets = n(), owed_ind = sum(`Amount Due`, na.rm = T)) |&gt;\n  filter(owed_ind &gt;= 350) |&gt; \n  group_by(n_tickets) |&gt; \n  summarize(n_vehicles = n(), total_owed = sum(owed_ind)) |&gt; \n  arrange(desc(n_tickets)) |&gt; \n  collect()\n\nowed_2024_gt350_ft &lt;- owed_2024_gt350 |&gt; \n  flextable() |&gt; \n  colformat_double(prefix =\"$\", digits = 2)\n\n\n\n\nn_ticketsn_vehiclestotal_owed5311$40,079.724311$34,850.873271$25,833.262841$20,332.302461$19,707.062341$19,037.982311$18,263.712131$16,765.012051$16,402.291911$15,356.131831$13,265.001821$13,859.291762$27,967.491681$13,087.251631$12,793.661601$13,129.991581$12,457.181481$11,349.501471$11,797.101441$11,749.431391$11,180.091372$20,230.001352$21,258.641342$21,457.541311$10,512.871302$19,690.251291$9,743.011282$20,401.941261$10,063.831251$9,919.241232$19,649.471221$9,889.511201$9,532.751193$28,481.161171$9,319.051161$9,429.651153$27,349.981132$17,807.931122$17,990.921081$8,679.701064$33,970.971053$23,548.761043$24,888.261032$16,419.721024$32,728.081014$32,471.611004$31,854.16982$15,369.41972$14,298.10962$15,214.46945$37,433.34931$5,906.63922$14,664.80912$13,738.46903$21,644.49896$41,077.33883$21,226.55877$45,523.40862$13,644.89854$27,208.45842$13,388.15836$39,488.828210$62,146.16816$38,115.94801$6,418.42795$29,844.40783$18,551.39779$53,812.60766$36,319.19755$29,735.27743$17,731.90734$23,358.16723$16,294.98714$22,656.59704$21,629.71696$31,560.646810$54,229.62675$25,908.69664$19,512.40658$40,939.076411$56,596.346315$73,699.83628$37,285.43616$26,921.936013$60,558.335911$51,006.525811$50,542.095719$85,209.265621$89,374.685517$69,846.855411$41,013.025317$68,278.265215$60,715.865127$105,694.025018$70,123.904928$105,852.564823$86,557.094723$85,050.084629$101,336.774543$148,233.044430$102,097.564335$115,873.414233$105,407.234144$139,904.954044$133,477.703948$143,870.383844$131,427.773752$145,395.313670$193,774.223552$139,436.053472$188,426.893370$177,404.973293$227,452.213185$198,931.6130106$242,633.4129117$254,423.0428111$234,622.9027135$280,962.8426142$285,057.0925161$305,949.4724190$350,266.9223220$384,062.6722237$389,414.5221316$500,926.4720305$463,225.8719371$535,920.6118438$595,369.5917535$689,680.8416577$700,289.9915680$772,419.5614840$886,358.88131,003$987,320.49121,200$1,083,019.76111,494$1,233,946.38101,878$1,421,372.0492,324$1,589,457.1283,068$1,867,358.1974,048$2,172,635.0465,447$2,539,327.0057,043$2,802,555.95\n\n\n\n In total, there are 34,346 vehicles who owe $350 or more in speeding violations received in 2024, totaling $28,950,498.48.\n\nHow many vehicles got a ticket that was not speeding-related in 2024?\n\n\nnot_speeding &lt;- violations_pq |&gt; \n  filter(str_detect(`Issue Date`, \"2024\") & !str_detect(Violation, \"SPEED\")) |&gt;\n  group_by(State, Plate) |&gt; \n  summarize(n_non_speeding_tickets = n()) |&gt; \n  collect()\n\n\nIn 2024, 2,991,562 vehicles got a ticket that was not speeding related. Interestingly, the vehicle with the greatest number of non-speeding tickets is a placeholder, with 32,437 tickets:\n\n\nStatePlaten_non_speeding_tickets99BLANKPLATE32,437NY63282MK1,218NY54243MN998NY82547PC878NY90484NC867NY80771ND857IN3275386844NJAT376A803NY86171MM788NY94347NC780\n\n\n\nHow many vehicles got a school zone speed camera violation in 2024?\n\n\nspeeding &lt;- violations_pq |&gt; \n  filter(str_detect(`Issue Date`, \"2024\") & str_detect(Violation, \"SPEED\")) |&gt;\n  group_by(State, Plate) |&gt; \n  summarize(n_speeding_tickets = n()) |&gt; \n  collect()\n\nIn 2024, 2,256,058 vehicles recieved a school zone speed camera violation. The 10 vehicles who recieved the most of these violations each got over 230 violations – Between 4 and more than 10 per week:\n\n\nStatePlaten_speeding_ticketsNYLCM8254563PAMHW9481531NYLHR1977467ILEJ45765362VATLN8692327NYLHY9227284FLJKWX36279NYKXH2766246PAMFX8335234NYKZA3799232\n\n\n\nWhat percent of vehicles not from the NY Metro region (i.e. with plates not from New York, New Jersey, Pennsylvania, or Connecticut) got at least one ticket each month in 2024?\n\n\nnyc_metro &lt;- c(\"NY\", \"NJ\", \"PA\", \"CT\")\n\n# Number of non-metro area vehicles with a violation in 2024\nnon_metro_vehicles &lt;- violations_pq |&gt; \n  filter(str_detect(`Issue Date`, \"2024\") & !(State %in% nyc_metro)) |&gt; \n  group_by(State, Plate) |&gt; \n  summarize(n_tickets = n()) |&gt; \n  collect()\n\n# All non-metro violations\nnon_metro_violations &lt;- violations_pq |&gt; \n  filter(str_detect(`Issue Date`, \"2024\") & !(State %in% nyc_metro)) |&gt; \n  collect()\n\n# Extract month from mm/dd/yyy dates\nnon_metro_violations_months &lt;- non_metro_violations |&gt; \n  mutate(Month = month(mdy(`Issue Date`)))\n\n# Separate successful extraction\nnon_metro_violations_months_valid &lt;- non_metro_violations_months |&gt; \n  filter(!is.na(Month))\n\n# Separate failed extraction - these violations have a datetime stamp, not date\nnon_metro_violations_months_na &lt;- non_metro_violations_months |&gt; \n  filter(is.na(Month))\n\n# Re extract month from datetime stamp\nnon_metro_violations_months_na &lt;- non_metro_violations_months_na |&gt; \n  mutate(Month = month(ymd_hms(`Issue Date`)))\n\n# Join, overwrite\nnon_metro_violations_months &lt;- bind_rows(non_metro_violations_months_valid,\n                                         non_metro_violations_months_na)\n\n# Aggregate by state, plate and create a list of months for each recived violation\nnon_metro_vehicle_violation_months &lt;- non_metro_violations_months |&gt; \n  group_by(State, Plate) |&gt; \n  summarize(ticket_months = list(Month))\n\n# Vector of all months\nall_months &lt;- seq(1,12)\n\n# Add column that evaluates to TRUE if list of violation months contains every calendar month\nnon_metro_vehicle_violation_months$all_months &lt;- sapply(non_metro_vehicle_violation_months$ticket_months,\n                                                        function (x) all(all_months %in% x))\n\n# Number of non-metro vehicles with at least one ticket per month\nnon_metro_ticket_all_months &lt;- non_metro_vehicle_violation_months |&gt; \n  filter(all_months == TRUE)\n\nThe percentage of non-metro region vehicles that recieved at least one ticket per month is 0.04%.\n\nHow many non-metro vehicles with 11 or more speed camera violations recieved at least one ticket per month?\n\n\n# Non metro \nnon_metro_speed_vehicles_gt10 &lt;- violations_pq |&gt; \n  filter(str_detect(`Issue Date`, \"2024\") & !(State %in% nyc_metro) & str_detect(Violation, \"SPEED\")) |&gt; \n  group_by(State, Plate) |&gt; \n  summarize(n_tickets = n()) |&gt; \n  filter(n_tickets &gt; 10) |&gt; \n  mutate(StatePlate = paste0(State,Plate)) |&gt; \n  collect()\n\n# Filter the non_metro_ticket_all_months dataset to those vehicles in the above dataframe\nnon_metro_ticket_all_months_gt10 &lt;- non_metro_ticket_all_months |&gt; \n  mutate(StatePlate = paste0(State,Plate)) |&gt; \n  filter(StatePlate %in% non_metro_speed_vehicles_gt10$StatePlate)\n\n4.01% of non-metro vehicles with 11 or more school zone speed camera violations recieved at least one ticket per month."
  }
]